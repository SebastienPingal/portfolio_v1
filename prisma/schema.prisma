datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstname     String?
  lastname      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comment       Comment[]
  like          Like[]
  stack         Stack[]   @relation("UserStacks")
  cvs           CV[]
}

model ExternalLink {
  id        String           @id @default(cuid())
  title     String
  url       String
  type      ExternalLinkType @default(PROFESSIONAL)
  logoWhite String?
  logoBlack String?
}

enum ExternalLinkType {
  PERSONAL
  PROFESSIONAL
  DEMO
}

enum PostType {
  WORK
  BLOGPOST
}

model Post {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  type      PostType
  content   String
  published Boolean   @default(false)
  stacks    Stack[]   @relation("PostStacks")
  comments  Comment[]
  likes     Like[]
  project   Project?
  projectId String?
}

model Comment {
  id        String  @id @default(cuid())
  post      Post    @relation(fields: [postId], references: [id])
  author    User    @relation(fields: [userId], references: [id])
  content   String? @db.Text
  published Boolean @default(false)
  postId    String
  userId    String
}

model Like {
  id     String @id @default(cuid())
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Stack {
  id          String  @id @default(cuid())
  title       String  @unique
  description String
  logo        String
  icon        String?
  order       Int?
  link        String
  posts       Post[]  @relation("PostStacks")
  users       User[]  @relation("UserStacks")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CV {
  id        String   @id @default(cuid())
  title     String
  data      Json
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, userId])
}

model Project {
  id          String   @id @default(cuid())
  title       Json     
  description Json     
  link        String?
  new         Boolean  @default(false)
  imagesUrl   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  post        Post?    @relation(fields: [postId], references: [id])
  postId      String?  @unique
}
