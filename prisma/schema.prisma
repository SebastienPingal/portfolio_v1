datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstname     String?
  lastname      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

enum PostType {
  WORK
  BLOGPOST
}

model Post {
  id        String        @id @default(cuid())
  title     String
  slug      String        @unique
  type      PostType
  content   String
  published Boolean       @default(false)
  stacks    StackOnPost[]
}

model Stack {
  id          String        @id @default(cuid())
  title       String        @unique
  description String
  logo        String
  icon        String?
  order       Int?
  link        String
  posts       StackOnPost[]
}

model StackOnPost {
  postId  String
  stackId String
  post    Post   @relation(fields: [postId], references: [id])
  stack   Stack  @relation(fields: [stackId], references: [id])

  @@id([postId, stackId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
